'''
In order to run this script, please download postgres.
Configure a user via root db through:
https://wiki.postgresql.org/wiki/First_steps

Once set up, run the program with your
postgres username, password, and preferred DB name of choice.

then run:
python3 betterWe_local_db.py <USERNAME> <PASSWORD> <DB NAME>

Upon success, enter your db with the "psql <DB NAME>" command.
'''

import psycopg2
import sys
from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

if (len(sys.argv) < 4):
    print("Not enough arguments. <USERNAME, PASSWORD, NEW DATABASE NAME>")
    sys.exit()

USERNAME = sys.argv[1]
PASSWORD = sys.argv[2]
NEW_DB_NAME = sys.argv[3]

con = psycopg2.connect(
    dbname='postgres',
    user=USERNAME,
    host='',
    password=PASSWORD
)

con.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
cur = con.cursor()

cur.execute("CREATE DATABASE %s  ;" % NEW_DB_NAME)

con.close()
cur.close()

con = psycopg2.connect(
    dbname=NEW_DB_NAME,
    user=USERNAME,
    host='',
    password=PASSWORD
)

cur = con.cursor()


cur.execute("CREATE TABLE user_profiles ( \
    user_email varchar(50) PRIMARY KEY, \
    display_name varchar(20) NOT NULL, \
    password varchar(50) NOT NULL, \
    profile_picture varchar(255));")

cur.execute("CREATE TABLE group_members ( \
    member_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, \
    user_email varchar(50), \
    date_joined timestamp, \
    room_id integer);")

cur.execute("CREATE TABLE rooms ( \
    room_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, \
    name varchar(50) NOT NULL, \
    description varchar(180), \
    private boolean, \
    theme smallint, \
    room_photo varchar(255));")

cur.execute("CREATE TABLE messages ( \
    message_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, \
    room_id integer, \
    user_email varchar(50), \
    message_content varchar(255) NOT NULL, \
    date_sent timestamp);")

cur.execute("CREATE TABLE tasks ( \
    task_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, \
    user_email varchar(50), \
    room_id integer, \
    task_name varchar(50) NOT NULL, \
    start_point integer NOT NULL CHECK(start_point >= 0), \
    progress integer, \
    end_point integer NOT NULL CHECK(end_point > 0));")

cur.execute("CREATE TABLE event_notifications ( \
    event_id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, \
    user_email varchar(50), \
    room_id integer, \
    event varchar(255), \
    date_sent timestamp);")

con.commit()

con.close()
cur.close()

print('Tables successfully created within ' + NEW_DB_NAME + '.')
